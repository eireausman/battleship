"use strict";(self.webpackChunkbattleship=self.webpackChunkbattleship||[]).push([[826],{351:(e,n,t)=>{var r=t(379),a=t.n(r),i=t(795),o=t.n(i),c=t(569),s=t.n(c),l=t(565),p=t.n(l),u=t(216),d=t.n(u),h=t(589),f=t.n(h),A=t(426),v={};function m(){return{player:function(e){return{playerType:e,cellChoice:function(e){return e[parseInt(Math.random()*e.length)]}}}}}v.styleTagTransform=f(),v.setAttributes=p(),v.insert=s().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=d(),a()(A.Z,v),A.Z&&A.Z.locals&&A.Z.locals;var C=function(e,n,t){return{shipID:e,shipLength:n,hitArray:t=void 0===t?[]:t,isHit:function(e,n){return t.push(e),!1!==n&&g(this),!0===this.isSunk()?"sunk":"hitOnly"},isSunk:function(){if(this.shipLength===this.hitArray.length)return!0},whereAmIOnBoard:function(e){for(var n=this,t=[],r=Object.entries(e).filter((function(e){return e[1].ship===n.shipID})),a=0;a<r.length;a+=1)t.push(r[a][0]);return t}}},g=function(e){var n=JSON.stringify(e);localStorage.setItem(e.shipID,n)};function b(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var S=function(){for(var e=["a","b","c","d","e","f","g","h","i","j"],n=["1","2","3","4","5","6","7","8","9","10"],t={},r=0;r<e.length;r+=1)for(var a=0;a<n.length;a+=1){var i="".concat(e[r]).concat(n[a]);t[i]={ship:!1,guessed:!1}}var o="";return{boardGrid:t,setBoardOwner:function(e){o=e},getBoardOwner:function(e){return o},placeShip:function(r){for(var a=!1,i=function(){var r=Object.entries(t).filter((function(e){return!1===e[1].ship})),a=parseInt(Math.random()*r.length,10),i=r[a][0].charAt(1),o=r[a][0].charAt(0);return{availableCells:r,randomCell:a,vChar:i,hChar:o,nextNumberCheck:n.indexOf(i),nextLetterCheck:e.indexOf(o)}},o=[],c=function(e,n,t){if("placeShipHere"===n)return t.filter((function(n){return n[0]===e})).length>0},s=function(){o.splice(0,o.length);for(var n=i(),s=0;s<r.shipLength;s+=1){var l=e[n.nextLetterCheck]+n.vChar;!0===c(l,"placeShipHere",n.availableCells)?o.push(l):o.splice(0,o.length),n.nextLetterCheck+=1}if(o.length===r.shipLength){for(var p=0;p<o.length;p+=1)t[o[p]].ship=r.shipID;a=!0}},l=function(){o.splice(0,o.length);for(var e=i(),s=0;s<r.shipLength;s+=1){var l=e.hChar+n[e.nextNumberCheck];!0===c(l,"placeShipHere",e.availableCells)&&o.push(l),e.nextNumberCheck+=1}if(o.length===r.shipLength){for(var p=0;p<o.length;p+=1)t[o[p]].ship=r.shipID;a=!0}};!1===a;){var p=Math.random();p>.5?l():p<.5&&s()}},receiveAttack:function(e,n,r){var a,i,o,c=t[n].guessed,s=t[n].ship,l={result:"",shipLocation:!1};if("p"===c||"c"===c)return l.result="cellUnavailable",l;if(!1!==s&&!1===c){if(e===s.charAt(0))return l.result="ownShip",l;if(t[n].guessed=e,l.result="directHit",!1!==r){var p=(a=s,i=localStorage.getItem(a),o=JSON.parse(i),C(o.shipID,o.shipLength,o.hitArray));"sunk"===p.isHit(n)&&(l.result="sunk",l.shipLocation=p.whereAmIOnBoard(t))}return l}return!1===s&&!1===c?(t[n].guessed=e,l.result="validGuessNoHit",l):void 0},allShipsSunkCheck:function(){for(var e=Object.entries(t),n=[],r="",a=0;a<e.length;a+=1)r="",!1!==e[a][1].ship&&!1===e[a][1].guessed&&(r={cell:e[a][0],ship:e[a][1].ship,guessed:e[a][1].guessed},n.push(r));return n},cellsNotGuessed:function(){return function(e){if(Array.isArray(e))return b(e)}(e=Object.entries(t).filter((function(e){return!1===e[1].guessed})))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,n){if(e){if("string"==typeof e)return b(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?b(e,n):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();var e},placeComputerBoardShips:function(e){var n=C("cShip2",2),t=C("cShip3a",3),r=C("cShip3b",3),a=C("cShip3c",3),i=C("cShip4a",4),o=C("cShip4b",4),c=C("cShip5",5);return e.placeShip(n),e.placeShip(t),e.placeShip(r),e.placeShip(a),e.placeShip(i),e.placeShip(o),e.placeShip(c),{cShip2:n,cShip3a:t,cShip3b:r,cShip3c:a,cShip4a:i,cShip4b:o,cShip5:c}},placePlayerBoardShips:function(e){var n=C("pShip2",2),t=C("pShip3a",3),r=C("pShip3b",3),a=C("pShip3c",3),i=C("pShip4a",4),o=C("pShip4b",4),c=C("pShip5",5);return e.placeShip(n),e.placeShip(t),e.placeShip(r),e.placeShip(a),e.placeShip(i),e.placeShip(o),e.placeShip(c),{pShip2:n,pShip3a:t,pShip3b:r,pShip3c:a,pShip4a:i,pShip4b:o,pShip5:c}},saveBoardShips:function(e){for(var n=Object.values(e),t=0;t<Object.keys(e).length;t+=1)g(n[t])}}},y=S(),E=y.placePlayerBoardShips(y);y.saveBoardShips(E);var x=S(),B=x.placeComputerBoardShips(x);x.saveBoardShips(B),function(e,n){var t=function(e,n){var t=m().player("p");e.setBoardOwner(t);var r=m().player("c");n.setBoardOwner(r);var a=t;return{computerTurn:function(){var n=r.cellChoice(e.cellsNotGuessed())[0];return{computerGuess:n,attackOutcome:e.receiveAttack("c",n)}},switchPlayer:function(){return a=a===t?r:t},currentPlayer:a}}(e,n),r=document.createElement("div");r.classList.add("gameContainer"),document.body.appendChild(r);var a=document.createElement("div");a.classList.add("playerContainer"),r.appendChild(a);var i=document.createElement("p");i.classList.add("playerTitle"),i.textContent="Your Grid",a.appendChild(i);var o=document.createElement("div");o.classList.add("boardGrid"),a.appendChild(o);for(var c=Object.entries(e.boardGrid),s=0;s<c.length;s+=1){var l=document.createElement("div");l.classList.add("boardCell"),l.setAttribute("data-cellRef","".concat(c[s][0])),o.appendChild(l),!1!==c[s][1].ship&&(l.classList.add("hasBoat"),l.textContent=c[s][1].ship)}var p=document.createElement("div");p.classList.add("computerContainer"),r.appendChild(p);var u=document.createElement("p");u.classList.add("computerTitle"),u.textContent="Computer Grid",p.appendChild(u);var d=document.createElement("div");d.classList.add("boardGrid"),p.appendChild(d);for(var h=Object.entries(n.boardGrid),f=function(r){var a=document.createElement("div");a.classList.add("boardCell"),a.classList.add("computerBoardCell"),a.setAttribute("data-cellRef","".concat(h[r][0])),d.appendChild(a),a.addEventListener("click",(function(r){if("p"===t.currentPlayer.playerType){var i=n.receiveAttack("p",r.target.dataset.cellref);v(a,i,n,d);var c=t.computerTurn(),s=o.querySelector('div[data-cellref="'.concat(c.computerGuess,'"]'));v(s,c.attackOutcome,e,o)}}))},A=0;A<h.length;A+=1)f(A);var v=function(e,n,t,r){if("cellUnavailable"===n.result)alert("This square has already been guessed in a previous turn.  Select another....");else if("directHit"===n.result)e.classList.add("directHit");else if("validGuessNoHit"===n.result)e.classList.add("guessedNoHit");else if("sunk"===n.result){console.log(e),console.log(n);for(var a="",i=0;i<n.shipLocation.length;i+=1)a=r.querySelector('div[data-cellref="'.concat(n.shipLocation[i],'"]')),console.log(a),a.classList.add("shipSunk");if(0===t.allShipsSunkCheck().length){var o="You won!  Good work!!";"p"===t.getBoardOwner().playerType&&(o="Computer wins.  Better luck next time"),console.log(t.getBoardOwner()),alert(o)}}}}(y,x)},426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([e.id,".gameContainer {\n  display: flex;\n  flex-wrap: nowrap;\n  gap: 20px;\n}\n\n.playerContainer {\n  display: flex;\n  flex-direction: column;\n}\n\n.playerTitle {\n  text-align: center;\n}\n\n.computerContainer {\n  display: flex;\n  flex-direction: column;\n}\n\n.computerTitle {\n  text-align: center;\n}\n\n.boardGrid {\n  display: flex;\n  flex-wrap: wrap;\n  width: 350px;\n}\n\n.boardCell {\n  display: flex;\n  width: 33px;\n  height: 33px;\n  border: 1px solid black;\n  transition: 0.8s;\n}\n\n.computerBoardCell {\n  cursor: pointer;\n}\n.computerBoardCell:hover {\n  background-color: bisque;\n}\n\n.hasBoat {\n  background-color: blue;\n}\n\n.guessedNoHit {\n  background-color: green;\n}\n.directHit {\n  background-color: red;\n}\n\n.shipSunk {\n  background-color: rgb(18, 18, 18);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,iBAAiB;EACjB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,YAAY;AACd;;AAEA;EACE,aAAa;EACb,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;AACA;EACE,wBAAwB;AAC1B;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;AACzB;AACA;EACE,qBAAqB;AACvB;;AAEA;EACE,iCAAiC;AACnC",sourcesContent:[".gameContainer {\n  display: flex;\n  flex-wrap: nowrap;\n  gap: 20px;\n}\n\n.playerContainer {\n  display: flex;\n  flex-direction: column;\n}\n\n.playerTitle {\n  text-align: center;\n}\n\n.computerContainer {\n  display: flex;\n  flex-direction: column;\n}\n\n.computerTitle {\n  text-align: center;\n}\n\n.boardGrid {\n  display: flex;\n  flex-wrap: wrap;\n  width: 350px;\n}\n\n.boardCell {\n  display: flex;\n  width: 33px;\n  height: 33px;\n  border: 1px solid black;\n  transition: 0.8s;\n}\n\n.computerBoardCell {\n  cursor: pointer;\n}\n.computerBoardCell:hover {\n  background-color: bisque;\n}\n\n.hasBoat {\n  background-color: blue;\n}\n\n.guessedNoHit {\n  background-color: green;\n}\n.directHit {\n  background-color: red;\n}\n\n.shipSunk {\n  background-color: rgb(18, 18, 18);\n}\n"],sourceRoot:""}]);const c=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(o[s]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);r&&o[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),n.push(p))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],c=0;c<e.length;c++){var s=e[c],l=r.base?s[0]+r.base:s[0],p=i[l]||0,u="".concat(l," ").concat(p);i[l]=p+1;var d=t(u),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)n[d].references++,n[d].updater(h);else{var f=a(h,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:f,references:1})}o.push(u)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var c=t(i[o]);n[c].references--}for(var s=r(e,a),l=0;l<i.length;l++){var p=t(i[l]);0===n[p].references&&(n[p].updater(),n.splice(p,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},e=>{e(e.s=351)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,